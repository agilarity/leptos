name: Verify Changed Examples

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  get-example-changed:
    name: Detect Example Change
    runs-on: ubuntu-latest
    outputs:
      example_changed: ${{ steps.set-example-changed.outputs.example_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get example files that changed
        id: changed-files
        uses: tj-actions/changed-files@v36
        with:
          files: |
            examples
            !examples/cargo-make
            !examples/gtk
            !examples/Makefile.toml
            !examples/README.md

      - name: List example files that changed
        run: echo '${{ steps.changed-files.outputs.all_changed_files }}'

      - name: Set example_changed
        id: set-example-changed
        run: |
          echo "example_changed=${{ steps.changed-files.outputs.any_changed }}" >> "$GITHUB_OUTPUT"

  get-matrix:
    name: Get Changed Example Matrix
    needs: [get-example-changed]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get example project directories that changed
        id: changed-dirs
        uses: tj-actions/changed-files@v36
        with:
          dir_names: true
          dir_names_max_depth: "2"
          files: |
            examples
            !examples/cargo-make
            !examples/gtk
            !examples/Makefile.toml
            !examples/README.md
          json: true
          quotepath: false

      - name: List example project directories that changed
        run: echo '${{ steps.changed-dirs.outputs.all_changed_files }}'

      - name: Set Matrix
        id: set-matrix
        run: |
          if [ ${{ needs.get-example-changed.outputs.example_changed }} == 'true' ]; then
            # Create matrix with changed directories
            echo "matrix={\"directory\":${{ steps.changed-dirs.outputs.all_changed_files }}}" >> "$GITHUB_OUTPUT"
          else
            # Create matrix with one item to prevent an empty vector error
            echo "matrix={\"directory\":[\"INTERNAL\"]}" >> "$GITHUB_OUTPUT"
          fi

  test:
    name: Verify
    runs-on: ubuntu-latest
    needs: [get-matrix]
    strategy:
      matrix: ${{ fromJSON(needs.get-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      # Setup environment
      - name: Install playwright browser dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libegl1 libvpx7 libevent-2.1-7 libopus0 libopengl0 libwoff1 libharfbuzz-icu0 libgstreamer-plugins-base1.0-0 libgstreamer-gl1.0-0 libhyphen0 libmanette-0.2-0 libgles2 gstreamer1.0-libav

      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Add wasm32-unknown-unknown
        run: rustup target add wasm32-unknown-unknown

      - name: Setup cargo-make
        uses: davidB/rust-cargo-make@v1

      - name: Cargo generate-lockfile
        run: cargo generate-lockfile

      - uses: Swatinem/rust-cache@v2

      - name: Install Trunk
        uses: jetli/trunk-action@v0.4.0
        with:
          version: "latest"

      - name: Print Trunk Version
        run: trunk --version

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Chrome Webriver
        run: |
          sudo apt-get update
          sudo apt-get install chromium-chromedriver

      # Run Cargo Make Task
      - name: Verify
        run: |
          if [ "${{ matrix.directory }}" = "INTERNAL" ]; then
            echo No verification required
          else
            cd ${{ matrix.directory }}
            cargo make --profile=github-actions ci
          fi
